#!/usr/bin/awk -f

function is_valid_for_label(n, label) {
	return n >= ranges[label][1][1] && n <= ranges[label][1][2] \
		|| n >= ranges[label][2][1] && n <= ranges[label][2][2]
}

function is_valid(   i, valid, label) {
	for (i = 1; i <= NF; ++i) {
		valid = 0
		for (label in ranges) {
			if (is_valid_for_label($i, label)) {
				valid = 1
			}
		}

		if (!valid) {
			return 0
		}
	}

	return 1
}

BEGIN { part = 1  }

/^$/ {
	++part
	if (part == 2) {
		FS = ","
	}
}

part == 1 {
	split($0, arr, /:/)
	label = arr[1]

	ranges[label][1][1] = ""
	split($(NF-2), ranges[label][1], /-/)

	ranges[label][2][1] = ""
	split($NF, ranges[label][2], /-/)
}

part == 2 && /,/ {
	for (i = 1; i <= NF; ++i) {
		my_ticket[i] = $i
	}
}

part == 3 && /,/ && is_valid() {
	++valid_count
	for (i = 1; i <= NF; ++i) {
		for (label in ranges) {
			if (is_valid_for_label($i, label)) {
				++pos_counts[i][label]
			}
		}
	}
}

END {
	for (i in pos_counts) {
		for (label in ranges) {
			if (pos_counts[i][label] == valid_count) {
				pos[i][label] = 1
			}
		}
	}

	while (1) {
		for (i in pos) {
			if (length(pos[i]) == 1) {
				for (label in pos[i]) {
					map[i] = label
				}
				delete pos[i]
			}
		}

		for (i in pos) {
			delete pos[i][label]
		}

		if (length(map) == length(ranges)) {
			break
		}
	}

	result = 1
	for (i in map) {
		if (map[i] ~ /^departure/) {
			result *= my_ticket[i]
		}
	}

	print result
}
