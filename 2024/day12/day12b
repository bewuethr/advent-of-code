#!/usr/bin/env ruby

Point = Struct.new(:x, :y) do
  def to_s = "#{x}/#{y}"

  def +(other) = Point.new(x + other.x, y + other.y)
end

class Map
  attr_reader :rows

  def initialize(rows)
    @rows = rows
    @y_range = (0...@rows.length)
    @x_range = (0...@rows[0].length)
  end

  def include?(p) = @y_range.cover?(p.y) && @x_range.cover?(p.x)

  def at(p)
    return nil unless include?(p)
    @rows.dig(p.y, p.x)
  end
end

def flood(node, plots, seen)
  area = 0
  plant_type = plots.at(node)
  q = [node]
  sides = Hash.new { |hash, key| hash[key] = {} }

  until q.empty?
    n = q.shift
    next if seen.include?(n)
    seen.add(n)
    area += 1

    [[0, 1], [0, -1], [1, 0], [-1, 0]].map { Point.new(_1, _2) }.each do |dp|
      p_new = n + dp
      if plots.at(p_new) == plant_type
        q.push(p_new)
      else
        (sides[dp][dp.y.zero? ? n.x : n.y] ||= []) << (dp.y.zero? ? n.y : n.x)
      end
    end
  end

  side_count = sides.values.sum do |side_hash|
    side_hash.values.sum do |arr|
      arr.sort.each_cons(2).count { _2 - _1 > 1 } + 1
    end
  end

  [area, side_count]
end

rows = File.readlines(ARGV[0]).map(&:chomp).map(&:chars)

plots = Map.new(rows)
seen = Set.new
price = 0

plots.rows.each_with_index do |row, y|
  row.each_with_index do |plot, x|
    p = Point.new(x, y)
    next if seen.include?(p)

    area, perimeter = flood(p, plots, seen)
    price += area * perimeter
  end
end

puts price
