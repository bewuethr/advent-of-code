#!/usr/bin/awk -f

# Represent state as single string
function stringify(state,    i, st_string, obj) {
    for (i = 1; i <= 4; ++i) {
        st_string = st_string i
        if (isarray(state[i])) {
            for (obj in state[i])
                st_string = st_string obj
        }
    }
    return st_string " E" state["elevator"]
}

# Create state from string
function destringify(string, state,    arr, floors, i, j) {
    delete state
    split(string, arr)
    state["elevator"] = substr(arr[2], 2)
    match(arr[1], /1(.*)2(.*)3(.*)4(.*)/, floors)
    for (i = 1; i <= 4; ++i) {
        for (j = 1; j <= length(floors[i]) - 2; j += 3) {
            state[i][substr(floors[i], j, 3)] = 1
        }
    }
}

# Pretty print state
function pretty_print(state,    i, floor, obj) {
    for (i = 4; i >= 1; --i) {
        floor = sprintf("%s %d:", state["elevator"] == i ? "E" : " ", i)
        if (isarray(state[i])) {
            for (obj in state[i])
                floor = floor " " obj
        }
        print floor
    }
}

# Copy state
function copy_state(from, to) {
    delete to
    destringify(stringify(from), to)
}

# Test if two states are the same
function is_equal(state1, state2) {
    return stringify(state1) == stringify(state2)
}

# Test if a state is legal
function is_legal(state,    elevator, i, obj, is_first, has_generators,
                            has_unshielded_microchip)
{
    elevator = state["elevator"]
    if (! (isarray(state[elevator]) && length(state[elevator]) > 0)) {
        # This should never even be suggested
        return 0
    }

    for (i = 1; i <= 4; ++i) {
        if (isarray(state[i]) && length(state[i]) > 0) {
            is_first = 1
            has_generators = 0
            has_unshielded_microchip = 0

            for (obj in state[i]) {
                if (is_first && obj ~ "^M") {
                    # There are no generators
                   continue
                }
                is_first = 0

                if (obj ~ "^G")
                    has_generators = 1

                if (obj ~ "^M") {
                    gen = "G" substr(obj, 2)
                    if (! (gen in state[i]))
                        has_unshielded_microchip = 1
                }
            }
            if (has_unshielded_microchip && has_generators)
                return 0
        }
    }
    return 1
}

# Get array of stringified legal states that can be reached from the current state
function get_next_states(state, next_states, move,    elev_dirs, dir, i, obj, candidate) {
    # Possible directions for elevator
    elev_dirs[1] = 1
    elev_dirs[2] = -1
    elevator = state["elevator"]

    for (dir in elev_dirs) {
        if (elevator == 1 && elev_dirs[dir] == -1 || \
            elevator == 4 && elev_dirs[dir] == 1)
        {
            continue
        }
        # Try moving one object
        for (obj in state[elevator]) {
            copy_state(state, candidate)
            delete candidate[elevator][obj]
            candidate[elevator + elev_dirs[dir]][obj] = 1
            candidate["elevator"] += elev_dirs[dir]
            if (is_legal(candidate)) {
                cand_str = stringify(candidate)
                if (! moves[cand_str]) {
                    next_states[cand_str] = 1
                    moves[cand_str] = move
                }
            }
        }

        # Try moving two objects
        for (obj1 in state[elevator]) {
            for (obj2 in state[elevator]) {
                if (obj1 < obj2) {
                    copy_state(state, candidate)
                    delete candidate[elevator][obj1]
                    delete candidate[elevator][obj2]
                    candidate[elevator + elev_dirs[dir]][obj1] = 1
                    candidate[elevator + elev_dirs[dir]][obj2] = 1
                    candidate["elevator"] += elev_dirs[dir]
                    if (is_legal(candidate)) {
                        cand_str = stringify(candidate)
                        if (! moves[cand_str]) {
                            next_states[cand_str] = 1
                            moves[cand_str] = move
                        }
                    }
                }
            }
        }
    }
}

BEGIN { PROCINFO["sorted_in"] = "@ind_str_asc" }

/nothing relevant/ { next }

# Read initial state
{
    for (i = 1; i <= NF; ++i) {
        if ($i ~ "generator") {
            state[NR]["G" substr($(i-1), 1, 2)] = 1
        }
        else if ($i ~ "microchip") {
            state[NR]["M" substr($(i-1), 1, 2)] = 1
        }
    }
}

END {
    # Extra stuff for part two
    state[1]["Mel"] = 1
    state[1]["Gel"] = 1
    state[1]["Mdi"] = 1
    state[1]["Gdi"] = 1

    state["elevator"] = 1
    goal = "1234GcoGcuGplGprGruMcoMcuMplMprMru E4"
    move = 0
    moves[stringify(state)] = move

    get_next_states(state, next_states, move+1)
    while (1) {
        ++move
        print "Looking at move " move
        for (i in next_states) {
            if (i == goal) {
                print moves[i] " moves"
                exit
            }
            delete next_states[i]
            destringify(i, next_state)
            get_next_states(next_state, next_states, move+1)
        }
    }
}
