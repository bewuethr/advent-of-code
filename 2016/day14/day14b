#!/usr/bin/awk -f

@load "general"

function contains_triple(str,    i) {
    for (i = 1; i <= 30; ++i) {
        if (substr(str, i, 1) == substr(str, i+1, 1) && \
            substr(str, i, 1) == substr(str, i+2, 1))
        {
            return substr(str, i, 3)
        }
    }
    return 0
}

function contains_quintuple(str,    i) {
    for (i = 1; i <= 28; ++i) {
        if (substr(str, i, 1) == substr(str, i+1, 1) && \
            substr(str, i, 1) == substr(str, i+2, 1) && \
            substr(str, i, 1) == substr(str, i+3, 1) && \
            substr(str, i, 1) == substr(str, i+4, 1))
        {
            return substr(str, i, 5)
        }
    }
    return 0
}

BEGIN { PROCINFO["sorted_in"] = "@ind_num_asc" }

{ salt = $0 }

END {
    idx = 0
    while (1) {
        hash = md5(salt idx)
        
        for (i = 1; i <= 2016; ++i)
            hash = md5(hash)

        triple = contains_triple(hash)
        if (triple) {
            printf "Found %s at %d\n", triple, idx
            triples[idx] = triple
        }

        quintuple = contains_quintuple(hash)
        if (quintuple) {
            printf "Found %s at %d\n", quintuple, idx
            for (tri_idx in triples) {
                # print "Checking " triples[tri_idx]
                if (quintuple ~ triples[tri_idx] && (idx - tri_idx <= 1000) && idx != tri_idx) {
                    ++ctr
                    printf "%s at %d is key number %s\n", triples[tri_idx], tri_idx, ctr
                    delete triples[tri_idx]
                    if (ctr == 64) {
                        printf "Triple index %d was the 64th key\n", tri_idx
                        exit
                    }
                }
            }
        }
        ++idx
    }
}
